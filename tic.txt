
import java.util.*;
public class TikTakToe {
	
	public static void grid(String[][] table){      //to display the grid
		for(int x=0;x<3;x++){
			for(int y=0;y<3;y++){
				System.out.print(" ");
				System.out.print(table[x][y]);
				System.out.print(" |");
				
			}
			System.out.println();
			System.out.println("-----+-----+-----");
		}
	}
	public static String player(String[][]table){       //wherever a valid move will be made it will add the move to the table
		System.out.println("enter a valid empty position for your move");
		Scanner sc=new Scanner(System.in);
		String place=sc.next();
		switch(place){      
		case "a":
			if(table[0][0].equals(" ")){
				return table[0][0]="x";
			}
			else return player(table);
		case "b":
			if(table[0][1].equals(" ")){
				return table[0][1]="x";
			}
			else return player(table);
		case "c":
			if(table[0][2].equals(" ")){
				return table[0][2]="x";
			}
			else return player(table);
		case "d":
			if(table[1][0].equals(" ")){
				return table[1][0]="x";
			}
			else return player(table);
		case "e":
			if(table[1][1].equals(" ")){
				return table[1][1]="x";
			}
			else return player(table);
		case "f":
			if(table[1][2].equals(" ")){
				return table[1][2]="x";
			}
			else return player(table);
		case "g":
			if(table[2][0].equals(" ")){
				return table[2][0]="x";
			}
			else return player(table);
		case "h":
			if(table[2][1].equals(" ")){
				return table[2][1]="x";
			}
			else return player(table);
		case "i":
			if(table[2][2].equals(" ")){
				return table[2][2]="x";
			}
			else return player(table);
		default:return player(table);       //giving player another chance to input position if the current position entered is invalid
		}
	}
	public static String computer(String[][]table){
		int x=(int)(9*Math.random()+1);
		switch(x){
			case 1:
				if(table[0][0].equals(" "))
					return table[0][0]="o";
				else computer(table);break;
			case 2:
				if(table[0][1].equals(" "))
					return table[0][1]="o";
				else computer(table);break;
			case 3:
				if(table[0][2].equals(" "))
					return table[0][2]="o";
				else computer(table);break;
			case 4:
				if(table[1][0].equals(" "))
					return table[1][0]="o";
				else computer(table);break;
			case 5:
				if(table[1][1].equals(" "))
					return table[1][1]="o";
				else computer(table);break;
			case 6:
				if(table[1][2].equals(" "))
					return table[1][2]="o";
				else computer(table);break;
			case 7:
				if(table[2][0].equals(" "))
					return table[2][0]="o";
				else computer(table);break;
			case 8:
				if(table[2][1].equals(" "))
					return table[2][1]="o";
				else computer(table);break;
			case 9:
				if(table[2][2].equals(" "))
					return table[2][2]="o";
				else computer(table);break;
			}
			return null;
		}
	public static void game(String[][] table){
		boolean result=false;
		for(int j=0;j<4;j++){
			player(table);  //for player to make a valid move
			grid(table);    //displaying the grid once the player's move is completed
                        //checking if player won either row-wise, column-wise or diagonally
			result=rowWin(table,0,"x")||rowWin(table,1,"x")||rowWin(table,2,"x")||colWin(table,0,"x")||colWin(table,1,"x")||colWin(table,2,"x")||crossWin(table,"x");
			if(result){
				System.out.println("You Win!");
				break;
			}
                        //computer's turn
			System.out.println("Computer's turn");
			computer(table);
			grid(table);
			result=rowWin(table,0,"o")||rowWin(table,1,"o")||rowWin(table,2,"o")||colWin(table,0,"o")||colWin(table,1,"o")||colWin(table,2,"o")||crossWin(table,"o");
			if(result){
				System.out.println("You Lose");
				break;
			}
			
		}
		if(result==false){
			result=rowWin(table,0,"x")||rowWin(table,1,"x")||rowWin(table,2,"x")||colWin(table,0,"x")||colWin(table,1,"x")||colWin(table,2,"x")||crossWin(table,"x");
			if(result){
				System.out.println("You Win!");
			}
		}
		if(result==false){
			System.out.print("Game Tied");
		}
	}
	public static boolean rowWin(String[][]table,int r,String s){       //checks if there is either 'x' in a row at all three places or 'o' at all three places
		if(table[r][0].equals(s)&&table[r][1].equals(s)&&table[r][2].equals(s))
		return true;
		else return false;
	}
	public static boolean colWin(String[][]table,int c,String s){       //checks for column win
		if(table[0][c].equals(s)&&table[1][c].equals(s)&&table[2][c].equals(s))
		return true;
		else return false;
	}
	public static boolean crossWin(String[][]table,String s){           //checks for diagonal win
		if((table[0][0].equals(s)&&table[1][1].equals(s)&&table[2][2].equals(s))||(table[2][0].equals(s)&&table[1][1].equals(s)&&table[0][2].equals(s)))
		return true;
		else return false;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[][] table=new String[3][3];
		for(int x=0;x<3;x++){
			for(int y=0;y<3;y++){
				table[x][y]=" ";
			}
		}
		grid(table);        //printing the initial table
		game(table);        //starting the game
	}

}
